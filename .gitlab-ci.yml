image: java:latest

stages:
  - build
  - database
  - docker
  - deploy

maven-build:
  image: maven:3-jdk-8
  stage: build
  script:
    - echo "Building Jar File"
    - mvn clean install
  artifacts:
    paths:
      - pdx-gun.jar
    expire_in: 1 day


init-database:
  stage: database
  script:
    - echo "Initializing Postgres Database"
    - /usr/lib/jvm/java-8-openjdk-amd64/bin/java -jar pdx-gun.jar
  artifacts:
    paths:
      - init.sql
    expire_in: 1 day


docker-build:
  # Official docker image.
  image: docker:latest
  stage: docker
  services:
    - docker:dind
  before_script:
    - echo $CI_BUILD_TOKEN | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"

    # PUSH THE IMAGE TO DOCKER HUB
    - echo "${DOCKER_HUB_PWD}" | docker login -u "${DOCKER_HUB_USER}" --password-stdin

    - docker tag "${CI_REGISTRY_IMAGE}" "${DOCKER_HUB_USER}"/"${DOCKER_HUB_REPO}"
    - docker push "${DOCKER_HUB_USER}"/"${DOCKER_HUB_REPO}"
    - docker logout


deploy:
  stage: deploy
  image: dtzar/helm-kubectl:2.13.0
  script:
    - kubectl config set-cluster local --server="${KUBERNETES_ENDPOINT}"
    - kubectl config set clusters.local.certificate-authority-data "${KUBERNETES_CERTIFICATE_AUTHORITY_DATA}"
    - kubectl config set-credentials pdx-gun-admin --token="${KUBERNETES_USER_TOKEN}"
    - kubectl config set-context "${KUBERNETES_NAMESPACE}" --cluster=local --user=${KUBERNETES_USER} --namespace="${KUBERNETES_NAMESPACE}"
    - kubectl config use-context "${KUBERNETES_NAMESPACE}"
    - kubectl version